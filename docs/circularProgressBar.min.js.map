{"version":3,"file":"circularProgressBar.min.js","sources":["../sources/helpers/defaults.js","../sources/helpers/function.js","../sources/index.js"],"sourcesContent":["/**\r\n * @typedef {Object} - Default object\r\n * @prop {String} [colorSlice] - Progress color circle\r\n * @prop {String} [fontColor] - Font color\r\n * @prop {String} [fontSize] - Font size\r\n * @prop {Number} [fontWeight] - Font weight\r\n * @prop {Array} [linearGradient] - Linear gradien for circle\r\n * @prop {Boolean} [number] - Show/hide number\r\n * @prop {Boolean} [round] - Path rounding\r\n * @prop {String} [fill] - Inner circle color\r\n * @prop {String} [unit] - Different unit instead of percentage (%) inside the circle\r\n * @prop {Number} [rotation] - Chart rotation\r\n * @prop {Number} [size] - Size progress bar width and height in px\r\n * @prop {Number} [stroke] - Stroke width, chart thickness\r\n */\r\n/**\r\n * Returns the default options of the component\r\n * @return {CPBOptions}\r\n */\r\nconst defaultOptions = {\r\n  colorSlice: '#00a1ff',\r\n  fontColor: '#000',\r\n  fontSize: '1.6rem',\r\n  fontWeight: 400,\r\n  lineargradient: false,\r\n  number: true,\r\n  round: false,\r\n  fill: 'none',\r\n  unit: '%',\r\n  rotation: -90,\r\n  size: 200,\r\n  stroke: 10,\r\n};\r\n\r\nexport default defaultOptions;\r\n","/**\r\n *\r\n * @param {Object} object\r\n * @returns {String}\r\n */\r\nconst styleTransform = ({ rotation, animationSmooth }) => {\r\n  const smoothAnimation = animationSmooth\r\n    ? `transition: stroke-dashoffset ${animationSmooth}`\r\n    : '';\r\n\r\n  return `transform:rotate(${rotation}deg);transform-origin: 50% 50%;${smoothAnimation}`;\r\n};\r\n\r\n/**\r\n * Set \"stroke-dasharray\": \"1, 2\"\r\n * @param {String} type\r\n * @returns {Object}\r\n */\r\nconst strokeDasharray = (type) => {\r\n  return {\r\n    'stroke-dasharray': type || '264',\r\n  };\r\n};\r\n\r\n/**\r\n * Set type stroke-linecap\r\n * @param {String} round\r\n * @returns {Object}\r\n */\r\nconst strokeLinecap = ({ round }) => {\r\n  return {\r\n    'stroke-linecap': round ? 'round' : '',\r\n  };\r\n};\r\n\r\n/**\r\n * Set font sieze/weight\r\n *\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nconst fontSettings = (options) => {\r\n  return {\r\n    'font-size': options.fontSize,\r\n    'font-weight': options.fontWeight,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param {String} element\r\n * @returns {HTMLElement}\r\n */\r\nconst querySelector = (element) => document.querySelector(element);\r\n\r\n/**\r\n * Set color or linear-gradient\r\n *\r\n * @param {String} element\r\n * @param {Object} object\r\n */\r\nconst setColor = (element, { lineargradient, index, colorSlice }) => {\r\n  element.setAttribute(\r\n    'stroke',\r\n    lineargradient ? `url(#linear-${index})` : colorSlice\r\n  );\r\n};\r\n\r\n/**\r\n * Set attribute to specific element\r\n *\r\n * @param {String} element\r\n * @param {Object} object\r\n */\r\nconst setAttribute = (element, object) => {\r\n  for (const key in object) {\r\n    element?.setAttribute(key, object[key]);\r\n  }\r\n};\r\n\r\n/**\r\n * Create svg element\r\n *\r\n * @param {String} type\r\n * @returns {SVGElement}\r\n */\r\nconst createNSElement = (type) =>\r\n  document.createElementNS('http://www.w3.org/2000/svg', type);\r\n\r\n/**\r\n * Create svg tspan\r\n *\r\n * @param {String} className\r\n * @param {String} unit\r\n * @returns {HTMLElement}\r\n */\r\nconst tspan = (className, unit) => {\r\n  const element = createNSElement('tspan');\r\n\r\n  element.classList.add(className);\r\n  if (unit) element.textContent = unit;\r\n  return element;\r\n};\r\n\r\n/**\r\n * Function generate stroke-dashoffset\r\n *\r\n * @param {Number} count\r\n * @param {Boolean} inverse - Counterclockwise animation\r\n * @param {Number} cut - Angle of the circle sector\r\n * @returns {Number}\r\n */\r\nconst dashOffset = (count, inverse, cut) => {\r\n  const cutChar = cut ? (264 / 100) * (100 - cut) : 264;\r\n  const angle = 264 - (count / 100) * cutChar;\r\n\r\n  return inverse ? -angle : angle;\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} element\r\n * @param {HTMLElement} el\r\n * @param {String} type\r\n */\r\nconst insertAdElement = (element, el, type = 'beforeend') =>\r\n  element.insertAdjacentElement(type, el);\r\n\r\n/**\r\n * Generator function linear-gradient stop svg elements\r\n *\r\n * @param {Object} object\r\n */\r\nconst gradient = ({ index, lineargradient }) => {\r\n  const defsElement = createNSElement('defs');\r\n  const linearGradient = createNSElement('linearGradient');\r\n  linearGradient.id = `linear-${index}`;\r\n\r\n  const countGradient = [].slice.call(lineargradient);\r\n\r\n  defsElement.appendChild(linearGradient);\r\n\r\n  let number = 0;\r\n  countGradient.map((item) => {\r\n    const stopElements = createNSElement('stop');\r\n\r\n    const stopObj = {\r\n      offset: `${number}%`,\r\n      'stop-color': `${item}`,\r\n    };\r\n    setAttribute(stopElements, stopObj);\r\n\r\n    linearGradient.appendChild(stopElements);\r\n    number += 100 / (countGradient.length - 1);\r\n  });\r\n\r\n  return defsElement;\r\n};\r\n\r\n/**\r\n * A function that generates tspan\r\n * elements with a number and unit\r\n *\r\n * @param {Object} options - Global configuration\r\n * @param {String} className\r\n */\r\nconst percent = (options, className) => {\r\n  const creatTextElementSVG = createNSElement('text');\r\n\r\n  creatTextElementSVG.classList.add(`${className}-text-${options.index}`);\r\n\r\n  // create tspan element with number\r\n  // and insert to svg text element\r\n  insertAdElement(\r\n    creatTextElementSVG,\r\n    tspan(`${className}-percent-${options.index}`)\r\n  );\r\n\r\n  // create and insert unit to text element\r\n  insertAdElement(\r\n    creatTextElementSVG,\r\n    tspan(`${className}-unit-${options.index}`, options.unit)\r\n  );\r\n\r\n  // config to svg text\r\n  const obj = {\r\n    x: '50%',\r\n    y: '50%',\r\n    fill: options.fontColor,\r\n    'text-anchor': 'middle',\r\n    dy: options.textPosition || '0.35em',\r\n    ...fontSettings(options),\r\n  };\r\n\r\n  setAttribute(creatTextElementSVG, obj);\r\n  return creatTextElementSVG;\r\n};\r\n\r\nexport {\r\n  createNSElement,\r\n  dashOffset,\r\n  fontSettings,\r\n  gradient,\r\n  insertAdElement,\r\n  percent,\r\n  querySelector,\r\n  setAttribute,\r\n  setColor,\r\n  strokeDasharray,\r\n  strokeLinecap,\r\n  styleTransform,\r\n};\r\n","import defaultOptions from './helpers/defaults';\r\nimport {\r\n  createNSElement,\r\n  dashOffset,\r\n  fontSettings,\r\n  gradient,\r\n  insertAdElement,\r\n  percent,\r\n  querySelector,\r\n  setAttribute,\r\n  setColor,\r\n  strokeDasharray,\r\n  strokeLinecap,\r\n  styleTransform,\r\n} from './helpers/function';\r\n\r\n/**\r\n * @class\r\n */\r\nexport default class CircularProgressBar {\r\n  /**\r\n   * CircularProgressBar constructor\r\n   *\r\n   * @param {String} pieName - class name\r\n   * @param {Object} globalObj - global configuration\r\n   */\r\n  constructor(pieName, globalObj = {}) {\r\n    this.className = pieName;\r\n    this.globalObj = globalObj;\r\n\r\n    const pieElements = document.querySelectorAll(`.${pieName}`);\r\n    const elements = [].slice.call(pieElements);\r\n    // add index to all progressbar\r\n    elements.map((item, index) => {\r\n      item.setAttribute('data-pie-index', index + 1);\r\n    });\r\n\r\n    this.elements = elements;\r\n  }\r\n\r\n  /**\r\n   * @param {object} outside\r\n   */\r\n  initial(outside) {\r\n    const triggeredOutside = outside || this.elements;\r\n    Array.isArray(triggeredOutside)\r\n      ? triggeredOutside.map((element) => this.createSVG(element))\r\n      : this.createSVG(triggeredOutside);\r\n  }\r\n\r\n  /**\r\n   * @param {SVGAElement} svg\r\n   * @param {HTMLElement} target\r\n   * @param {Object} options\r\n   */\r\n  progress(svg, target, options) {\r\n    const pieName = this.className;\r\n    if (options.number) {\r\n      insertAdElement(svg, percent(options, pieName));\r\n    }\r\n\r\n    const progressCircle = querySelector(`.${pieName}-circle-${options.index}`);\r\n\r\n    const configCircle = {\r\n      fill: 'none',\r\n      'stroke-width': options.stroke,\r\n      'stroke-dashoffset': '264',\r\n      ...strokeDasharray(),\r\n      ...strokeLinecap(options),\r\n    };\r\n    setAttribute(progressCircle, configCircle);\r\n\r\n    // animation progress\r\n    this.animationTo({ ...options, element: progressCircle }, true);\r\n\r\n    // set style and rotation\r\n    progressCircle.setAttribute('style', styleTransform(options));\r\n\r\n    // set color\r\n    setColor(progressCircle, options);\r\n\r\n    // set width and height on div\r\n    target.setAttribute(\r\n      'style',\r\n      `width:${options.size}px;height:${options.size}px;`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Callback function\r\n   *\r\n   * @param {Object} options\r\n   * @param {Boolean} initial\r\n   */\r\n  animationTo(options, initial = false) {\r\n    const pieName = this.className;\r\n    const previousConfigObj = JSON.parse(\r\n      querySelector(`[data-pie-index=\"${options.index}\"]`).getAttribute(\r\n        'data-pie'\r\n      )\r\n    );\r\n\r\n    const circleElement = querySelector(`.${pieName}-circle-${options.index}`);\r\n\r\n    if (!circleElement) return;\r\n\r\n    // merging all configuration objects\r\n    const commonConfiguration = initial\r\n      ? options\r\n      : {\r\n          ...defaultOptions,\r\n          ...previousConfigObj,\r\n          ...options,\r\n          ...this.globalObj,\r\n        };\r\n\r\n    // update color circle\r\n    if (!initial) {\r\n      setColor(circleElement, commonConfiguration);\r\n    }\r\n\r\n    // font color update\r\n    if (!initial && commonConfiguration.number) {\r\n      const fontconfig = {\r\n        fill: commonConfiguration.fontColor,\r\n        ...fontSettings(commonConfiguration),\r\n      };\r\n      const textElement = querySelector(\r\n        `.${pieName}-text-${commonConfiguration.index}`\r\n      );\r\n      setAttribute(textElement, fontconfig);\r\n    }\r\n\r\n    const centerNumber = querySelector(`.${pieName}-percent-${options.index}`);\r\n\r\n    if (commonConfiguration.animationOff) {\r\n      if (commonConfiguration.number)\r\n        centerNumber.textContent = `${commonConfiguration.percent}`;\r\n      circleElement.setAttribute(\r\n        'stroke-dashoffset',\r\n        dashOffset(commonConfiguration.percent, commonConfiguration.inverse)\r\n      );\r\n      return;\r\n    }\r\n\r\n    // get numer percent from data-angel\r\n    let angle = JSON.parse(circleElement.getAttribute('data-angel'));\r\n\r\n    // round if number is decimal\r\n    const percent = Math.round(options.percent);\r\n\r\n    // if percent 0 then set at start 0%\r\n    if (percent == 0) {\r\n      if (commonConfiguration.number) centerNumber.textContent = '0';\r\n      circleElement.setAttribute('stroke-dashoffset', '264');\r\n    }\r\n\r\n    if (percent > 100 || percent <= 0 || angle === percent) return;\r\n\r\n    let request;\r\n    let i = initial ? 0 : angle;\r\n\r\n    const fps = commonConfiguration.speed || 1000;\r\n    const interval = 1000 / fps;\r\n    const tolerance = 0.1;\r\n    let then = performance.now();\r\n\r\n    const performAnimation = (now) => {\r\n      request = requestAnimationFrame(performAnimation);\r\n      const delta = now - then;\r\n\r\n      if (delta >= interval - tolerance) {\r\n        then = now - (delta % interval);\r\n\r\n        angle >= commonConfiguration.percent ? i-- : i++;\r\n      }\r\n\r\n      circleElement.setAttribute(\r\n        'stroke-dashoffset',\r\n        dashOffset(i, commonConfiguration.inverse, commonConfiguration.cut)\r\n      );\r\n      if (centerNumber && commonConfiguration.number) {\r\n        centerNumber.textContent = `${i}`;\r\n      }\r\n\r\n      circleElement.setAttribute('data-angel', i);\r\n      circleElement.parentNode.setAttribute('aria-valuenow', i);\r\n\r\n      if (i === percent) {\r\n        cancelAnimationFrame(request);\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(performAnimation);\r\n  }\r\n\r\n  /**\r\n   * Create svg elements\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  createSVG(element) {\r\n    const index = element.getAttribute('data-pie-index');\r\n    const json = JSON.parse(element.getAttribute('data-pie'));\r\n\r\n    const options = { ...defaultOptions, ...json, index, ...this.globalObj };\r\n\r\n    const svg = createNSElement('svg');\r\n\r\n    const configSVG = {\r\n      role: 'progressbar',\r\n      width: options.size,\r\n      height: options.size,\r\n      viewBox: '0 0 100 100',\r\n      'aria-valuemin': '0',\r\n      'aria-valuemax': '100',\r\n    };\r\n\r\n    setAttribute(svg, configSVG);\r\n\r\n    // colorCircle\r\n    if (options.colorCircle) {\r\n      svg.appendChild(this.circle(options));\r\n    }\r\n\r\n    // gradient\r\n    if (options.lineargradient) {\r\n      svg.appendChild(gradient(options));\r\n    }\r\n\r\n    svg.appendChild(this.circle(options, 'top'));\r\n\r\n    element.appendChild(svg);\r\n\r\n    this.progress(svg, element, options);\r\n  }\r\n\r\n  /**\r\n   * Create circle top/bottom\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} where\r\n   * @returns {SVGElement}\r\n   */\r\n  circle(options, where = 'bottom') {\r\n    const circle = createNSElement('circle');\r\n\r\n    let configCircle = {};\r\n    if (options.cut) {\r\n      const dashoffset = 264 - (100 - options.cut) * 2.64;\r\n      configCircle = {\r\n        'stroke-dashoffset': options.inverse ? -dashoffset : dashoffset,\r\n        style: styleTransform(options),\r\n        ...strokeDasharray(),\r\n        ...strokeLinecap(options),\r\n      };\r\n    }\r\n\r\n    const objCircle = {\r\n      fill: options.fill,\r\n      stroke: options.colorCircle,\r\n      'stroke-width': options.strokeBottom || options.stroke,\r\n      ...configCircle,\r\n    };\r\n\r\n    if (options.strokeDasharray) {\r\n      Object.assign(objCircle, { ...strokeDasharray(options.strokeDasharray) });\r\n    }\r\n\r\n    const typeCircle =\r\n      where === 'top'\r\n        ? { class: `${this.className}-circle-${options.index}` }\r\n        : objCircle;\r\n\r\n    const objConfig = {\r\n      cx: '50%',\r\n      cy: '50%',\r\n      r: 42,\r\n      'shape-rendering': 'geometricPrecision',\r\n      ...typeCircle,\r\n    };\r\n\r\n    setAttribute(circle, objConfig);\r\n\r\n    return circle;\r\n  }\r\n}\r\n"],"names":["defaultOptions","colorSlice","fontColor","fontSize","fontWeight","lineargradient","number","round","fill","unit","rotation","size","stroke","styleTransform","animationSmooth","strokeDasharray","type","strokeLinecap","fontSettings","options","querySelector","element","document","setColor","index","setAttribute","object","key","createNSElement","createElementNS","tspan","className","classList","add","textContent","dashOffset","count","inverse","cut","angle","insertAdElement","el","insertAdjacentElement","constructor","pieName","globalObj","pieElements","querySelectorAll","elements","slice","call","map","item","initial","outside","triggeredOutside","this","Array","isArray","createSVG","progress","svg","target","creatTextElementSVG","obj","x","y","dy","textPosition","percent","progressCircle","configCircle","animationTo","previousConfigObj","JSON","parse","getAttribute","circleElement","commonConfiguration","fontconfig","textElement","centerNumber","animationOff","Math","request","i","interval","speed","then","performance","now","performAnimation","requestAnimationFrame","delta","parentNode","cancelAnimationFrame","json","configSVG","role","width","height","viewBox","colorCircle","appendChild","circle","defsElement","linearGradient","id","countGradient","stopElements","offset","length","gradient","where","dashoffset","style","objCircle","strokeBottom","Object","assign","objConfig","cx","cy","r","class"],"mappings":"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"}